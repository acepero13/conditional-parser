plugins {
    id 'java'
    id 'antlr'
    id 'idea'
}

compileJava {
    sourceCompatibility = '16'
    targetCompatibility = '16'
}

group 'com.acepero13'
version '1.0-SNAPSHOT'
final antlrGen = 'gen'
final baseDir = 'generated-src/main/java/'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    antlr "org.antlr:antlr4:4.9.3"
    //compile "org.antlr:antlr4-runtime:4.9.3"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

generateGrammarSource {
    maxHeapSize = "128m"
    outputDirectory = file(antlrGen)
    arguments += ['-package', 'com.acepero13.research.conditional', '-visitor', '-listener']
}

generateGrammarSource.doLast {
    moveAntlrGeneratedFilesToTheirPackages(source, antlrGen, baseDir)
}

def moveAntlrGeneratedFilesToTheirPackages(FileTree grammarFiles, generatedFolder, destFolder) {
    grammarFiles.each { File file ->
        final grammarName = file.name.lastIndexOf('.') >= 0 ? file.name[0..file.name.lastIndexOf('.') - 1] : file.name
        final String grammarPackage = 'com.acepero13.research.conditional'
        copy {
            from generatedFolder
            include "${grammarName}*.*"
            into destFolder + "/" + grammarPackage.replaceAll("\\.", "/")
            // TODO: Put this in a gen folder
        }
    }
    project.delete fileTree(generatedFolder).include('*.*')
}


compileJava.dependsOn generateGrammarSource
sourceSets {
    generated {
        java.srcDir 'generated-src/main'
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java
clean {
    delete "generated-src"
    delete "generated/java/com"
}
idea {
    module {
        sourceDirs += file("generated-src/main/java")
    }
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}